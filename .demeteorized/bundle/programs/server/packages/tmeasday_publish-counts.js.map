{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday_publish-counts/server/publish-counts.js"],"names":[],"mappingsyH","file":"/packages/tmeasday_publish-counts.js","sourcesContent":["var noWarnings = false;\n\nCounts = {};\nCounts.publish = function(self, name, cursor, options) {\n  var initializing = true;\n  var handle;\n  options = options || {};\n\n  var extraField, countFn;\n\n  if (options.countFromField) {\n    extraField = options.countFromField;\n    if ('function' === typeof extraField) {\n      countFn = Counts._safeAccessorFunction(extraField);\n    } else {\n      countFn = function(doc) {\n        return doc[extraField] || 0;    // return 0 instead of undefined.\n      }\n    }\n  } else if (options.countFromFieldLength) {\n    extraField = options.countFromFieldLength;\n    if ('function' === typeof extraField) {\n      countFn = Counts._safeAccessorFunction(function (doc) {\n        return extraField(doc).length;\n      });\n    } else {\n      countFn = function(doc) {\n        if (doc[extraField]) {\n          return doc[extraField].length;\n        } else {\n          return 0;\n        }\n      }\n    }\n  }\n\n\n  if (countFn && options.nonReactive)\n    throw new Error(\"options.nonReactive is not yet supported with options.countFromFieldLength or options.countFromFieldSum\");\n\n  if (cursor && cursor._cursorDescription) {\n    cursor._cursorDescription.options.fields =\n      Counts._optimizeQueryFields(cursor._cursorDescription.options.fields, extraField, options.noWarnings);\n  }\n\n  var count = 0;\n  var observers = {\n    added: function(doc) {\n      if (countFn) {\n        count += countFn(doc);\n      } else {\n        count += 1;\n      }\n\n      if (!initializing)\n        self.changed('counts', name, {count: count});\n    },\n    removed: function(doc) {\n      if (countFn) {\n        count -= countFn(doc);\n      } else {\n        count -= 1;\n      }\n      self.changed('counts', name, {count: count});\n    }\n  };\n\n  if (countFn) {\n    observers.changed = function(newDoc, oldDoc) {\n      if (countFn) {\n        count += countFn(newDoc) - countFn(oldDoc);\n      }\n\n      self.changed('counts', name, {count: count});\n    };\n  }\n\n  if (!countFn) {\n    self.added('counts', name, {count: cursor.count()});\n    if (!options.noReady)\n      self.ready();\n  }\n\n  if (!options.nonReactive)\n    handle = cursor.observe(observers);\n\n  if (countFn)\n    self.added('counts', name, {count: count});\n\n  if (!options.noReady)\n    self.ready();\n\n  initializing = false;\n\n  self.onStop(function() {\n    if (handle)\n      handle.stop();\n  });\n\n  return {\n    stop: function() {\n      if (handle) {\n        handle.stop();\n        handle = undefined;\n      }\n    }\n  };\n};\n// back compatibility\npublishCount = Counts.publish;\n\nCounts.noWarnings = function (noWarn) {\n  // suppress warnings if no arguments, or first argument is truthy\n  noWarnings = (0 == arguments.length || !!noWarn);\n}\n\nCounts._safeAccessorFunction = function safeAccessorFunction (fn) {\n  // ensure that missing fields don't corrupt the count.  If the count field\n  // doesn't exist, then it has a zero count.\n  return function (doc) {\n    try {\n      return fn(doc) || 0;    // return 0 instead of undefined\n    }\n    catch (err) {\n      if (err instanceof TypeError) {   // attempted to access property of undefined (i.e. deep access).\n        return 0;\n      } else {\n        throw err;\n      }\n    }\n  };\n}\n\nCounts._optimizeQueryFields = function optimizeQueryFields (fields, extraField, noWarn) {\n  switch (typeof extraField) {\n    case 'function':      // accessor function used.\n      if (undefined === fields) {\n        // user did not place restrictions on cursor fields.\n        Counts._warn(noWarn,\n                      'publish-counts: Collection cursor has no field limits and will fetch entire documents.  ' +\n                      'consider specifying only required fields.');\n        // if cursor field limits are empty to begin with, leave them empty.  it is the\n        // user's responsibility to specify field limits when using accessor functions.\n      }\n      // else user specified restrictions on cursor fields.  Meteor will ensure _id is one of them.\n      // WARNING: unable to verify user included appropriate field for accessor function to work.  we can't hold their hand ;_;\n\n      return fields;\n\n    case 'string':        // countFromField or countFromFieldLength has property name.\n      // extra field is a property\n\n      // automatically set limits if none specified.  keep existing limits since user\n      // may use a cursor transform and specify a dynamic field to count, but require other\n      // fields in the transform process  (e.g. https://github.com/percolatestudio/publish-counts/issues/47).\n      fields = fields || {};\n      // _id and extraField are required\n      fields._id = true;\n      fields[extraField] = true;\n\n      if (2 < _.keys(fields).length)\n        Counts._warn(noWarn,\n                      'publish-counts: unused fields detected in cursor fields option',\n                      _.omit(fields, ['_id', extraField]));\n\n      // use modified field limits.  automatically defaults to _id and extraField if none specified by user.\n      return fields;\n\n    case 'undefined':     // basic count\n      if (fields && 0 < _.keys(_.omit(fields, ['_id'])).length)\n        Counts._warn(noWarn,\n                      'publish-counts: unused fields removed from cursor fields option.',\n                      _.omit(fields, ['_id']));\n\n      // dispose of user field limits, only _id is required\n      fields = { _id:  true };\n\n      // use modified field limits.  automatically defaults to _id if none specified by user.\n      return fields;\n\n    default:\n      throw new Error(\"unknown invocation of Count.publish() detected.\");\n  }\n}\n\nCounts._warn = function warn (noWarn) {\n  if (noWarnings || noWarn || 'production' == process.env.NODE_ENV)\n    return;\n\n  var args = Array.prototype.slice.call(arguments, 1);\n  console.warn.apply(console, args);\n}\n"]}