{"version":3,"sources":["meteor://ðŸ’»app/packages/xinranxiao_spotify/packages/xinranxiao_spotify.js"],"names":[],"mappingsfile":"/packages/xinranxiao_spotify.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/xinranxiao:spotify/spotify_common.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (typeof Spotify === 'undefined') {                                                                                  // 1\n  Spotify = {};                                                                                                        // 2\n}                                                                                                                      // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/xinranxiao:spotify/spotify_server.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar OAuth = Package.oauth.OAuth;                                                                                       // 1\n                                                                                                                       // 2\nSpotify.whitelistedFields = ['display_name', 'email', 'id', 'uri', 'images'];                                          // 3\n                                                                                                                       // 4\n/*                                                                                                                     // 5\n  Registers the oauth service.                                                                                         // 6\n */                                                                                                                    // 7\nOAuth.registerService('spotify', 2, null, function(query) {                                                            // 8\n  var response = getTokens(query);                                                                                     // 9\n  var refreshToken = response.refreshToken;                                                                            // 10\n  var identity = getIdentity(response.accessToken);                                                                    // 11\n                                                                                                                       // 12\n  // Set the service data.                                                                                             // 13\n  var serviceData = {                                                                                                  // 14\n    accessToken: response.accessToken,                                                                                 // 15\n    expiresAt: (+new Date) + (1000 * response.expiresIn)                                                               // 16\n  };                                                                                                                   // 17\n                                                                                                                       // 18\n  // Set refresh token.                                                                                                // 19\n  if (refreshToken) {                                                                                                  // 20\n    serviceData.refreshToken = refreshToken;                                                                           // 21\n  }                                                                                                                    // 22\n                                                                                                                       // 23\n  // Set any additional fields.                                                                                        // 24\n  var fields = _.pick(identity, Spotify.whitelistedFields);                                                            // 25\n  _.extend(serviceData, fields);                                                                                       // 26\n                                                                                                                       // 27\n  return {                                                                                                             // 28\n    serviceData: serviceData,                                                                                          // 29\n    options: { profile: fields }                                                                                       // 30\n  };                                                                                                                   // 31\n});                                                                                                                    // 32\n                                                                                                                       // 33\n// checks whether a string parses as JSON                                                                              // 34\nvar isJSON = function (str) {                                                                                          // 35\n  try {                                                                                                                // 36\n    JSON.parse(str);                                                                                                   // 37\n    return true;                                                                                                       // 38\n  } catch (e) {                                                                                                        // 39\n    return false;                                                                                                      // 40\n  }                                                                                                                    // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/*                                                                                                                     // 44\n  Helper function that returns an object with:                                                                         // 45\n    accessToken (token itself)                                                                                         // 46\n    expiresIn (token lifespan)                                                                                         // 47\n    refreshToken                                                                                                       // 48\n */                                                                                                                    // 49\nvar getTokens = function(query) {                                                                                      // 50\n  var config = ServiceConfiguration.configurations.findOne({service: 'spotify'});                                      // 51\n  if (!config)                                                                                                         // 52\n    throw new ServiceConfiguration.ConfigError();                                                                      // 53\n                                                                                                                       // 54\n  var response;                                                                                                        // 55\n  try {                                                                                                                // 56\n    // Request access token.                                                                                           // 57\n    response = HTTP.post(                                                                                              // 58\n      \"https://accounts.spotify.com/api/token\", { params: {                                                            // 59\n        code: query.code,                                                                                              // 60\n        client_id: config.clientId,                                                                                    // 61\n        client_secret: OAuth.openSecret(config.secret),                                                                // 62\n        redirect_uri: OAuth._redirectUri('spotify', config),                                                           // 63\n        grant_type: 'authorization_code'                                                                               // 64\n      }});                                                                                                             // 65\n  } catch (err) {                                                                                                      // 66\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Spotify. \" + err.message), {response: err.response});\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  // Spotify returns responses like 'E{\"error\":\"server_error\",\"error_description\":\"Unexpected status: 415\"}' on error. // 70\n  if (isJSON(response)) {                                                                                              // 71\n    throw new Error(\"Failed to complete OAuth handshake with Spotify. \" + response);                                   // 72\n  } else if (!response.data.access_token) {                                                                            // 73\n    throw new Error(\"Failed to complete OAuth handshake with Spotify. No access_token found in response.\");            // 74\n  } else {                                                                                                             // 75\n    return {                                                                                                           // 76\n      accessToken: response.data.access_token,                                                                         // 77\n      refreshToken: response.data.refresh_token,                                                                       // 78\n      expiresIn: response.data.expires_in                                                                              // 79\n    };                                                                                                                 // 80\n  }                                                                                                                    // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n// Helper function that fetches and returns the user's Spotify profile.                                                // 84\nvar getIdentity = function(accessToken) {                                                                              // 85\n  try {                                                                                                                // 86\n    return HTTP.get(                                                                                                   // 87\n      \"https://api.spotify.com/v1/me\",                                                                                 // 88\n      { params: { access_token: accessToken }}).data;                                                                  // 89\n  } catch (err) {                                                                                                      // 90\n    throw _.extend(new Error(\"Failed to fetch identity from Spotify. \" + err.message), { response: err.response });    // 91\n  }                                                                                                                    // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nSpotify.retrieveCredential = function(credentialToken, credentialSecret) {                                             // 95\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);                                                  // 96\n};                                                                                                                     // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}